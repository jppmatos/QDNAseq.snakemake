import re
import os

configfile: "config.yaml"


DIR_FASTQ = os.path.join(config["path"]["dir_fastq"],"")
DIR_OUT = os.path.join(config["path"]["dir_out"],"")
DIR_QC = os.path.join(config["path"]["dir_qc"],"")
DIR_BAM = os.path.join(config["path"]["dir_bam"],"")
DIR_STATS = os.path.join(config["path"]["dir_stats"],"")
DIR_LOG = os.path.join(config["path"]["dir_log"],"")

(wholenames,) = glob_wildcards(DIR_FASTQ+"{wholename}.fastq.gz")
profiletypes = config["summary"]["profiletypes"]
BINSIZES=config["QDNAseq"]["BINSIZES"]
imagetype=config["ACE"]["imagetype"]
ACEBINSIZES=config["ACE"]["ACEBINSIZES"]
setting = config["pipeline"]["setting"]

def getnames():
    SAMPLES=dict()
    for wholename in wholenames:
        sample = wholename
        #fastqfile="../fastq/"+wholename+".fastq.gz"
        fastqfile = DIR_FASTQ + wholename + ".fastq.gz"
        SAMPLES[sample] = fastqfile
    return(SAMPLES)

SAMPLES=getnames()
print(SAMPLES)

#DEBUG
print("________________")
print(os.getcwd())
print("________________")
#/DEBUG

if setting == "service": #rule service
    rule service:
        input:
            ##expand(DIR_OUT + "{binSize}kbp/summary.html", binSize=BINSIZES), # summary
            #expand(DIR_OUT + DIR_BAM + "{sample}.samse.sam"),
            expand(DIR_OUT + "outDUMMY.txt"), # summary
#...

rule test_DEBUG
    input:
        expand(DIR_FASTQ + "{sample}.fastq.gz", sample=SAMPLES.keys()), 
    output:
        DIR_OUT + "outDUMMY.txt"
    params:
        ref=config['bwa']['REF'],
    shell:
        "echo 'hello' ; " 
        "pwd ; "
        "ls ; "
        "echo '{input}' ;"
        "touch {output}"

rule bwa_aln:
    input:
        #lambda wildcards: SAMPLES[wildcards.sample],
        # For some reason podman/docker does not like: lambda wildcards: SAMPLES[wildcards.sample]
        expand(DIR_FASTQ + "{sample}.fastq.gz", sample=SAMPLES.keys()), 
    output:
        sai=temp(DIR_OUT + DIR_BAM +  "{sample}.sai"),
        samse=temp(DIR_OUT + DIR_BAM + "{sample}.samse.sam")
    params:
        ref=config['bwa']['REF'],
        n=config['bwa']['max_edit_distance'],
        q=config['bwa']['read_trimming_param'],
    threads: config['pipeline']['THREADS']
    log: DIR_OUT + DIR_LOG + "bwa/{sample}.log"
    shell:
        "echo 'hello'; pwd; "
        "echo '{input}' ;"
        "bwa aln -n {params.n} -t {threads} -q {params.q} {params.ref} {input} > {output.sai} 2> {log}; "
        "bwa samse -f {output.samse} -r '@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}'" 
        " {params.ref} {output.sai} {input} 2>> {log}"

rule samtools_sort:
    input:
        samse=DIR_OUT + DIR_BAM + "{sample}.samse.sam",
	      sai=DIR_OUT + DIR_BAM + "{sample}.sai"
    output:
        temp(DIR_OUT + "tmp/{sample}.all.bam")
    params:
        output=DIR_OUT + "tmp/{sample}.all"
    log: DIR_OUT + DIR_LOG + "samtools/{sample}.log"
    shell:
        "samtools view -uS {input.samse} 2> {log}| samtools sort - -o {output} 2>> {log}"
